global
    log 127.0.0.1 local0
    # log 127.0.0.1 local1 notice
    user root
    group root
    daemon
    maxconn 20000

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

frontend haproxynode
    bind *:9080
    mode http

    acl ldap_protected_domain hdr_beg(host) -i protected-ldap.example.com
    acl oidc_protected_domain hdr_beg(host) -i protected-oidc.example.com
    acl dex_domain hdr_beg(host) -i dex.example.com
    acl auth_domain hdr_beg(host) -i auth.example.com
    
    # define the spoe agents
    filter spoe engine ldap-auth config /usr/local/etc/haproxy/spoe-auth.conf
    filter spoe engine oidc-auth config /usr/local/etc/haproxy/spoe-auth.conf

    # map the spoe response to acl variables
    acl authenticated var(sess.auth.is_authenticated) -m bool

    use_backend dex-backend if dex_domain
    use_backend oidc-auth-backend if auth_domain

    # apply the access policy for LDAP
    use_backend protected-app-backend if ldap_protected_domain authenticated
    use_backend unauthorized-backend if ldap_protected_domain ! authenticated

    # apply the access policy for OIDC
    use_backend redirect-backend if oidc_protected_domain ! authenticated
    use_backend protected-app-backend if oidc_protected_domain authenticated

    # otherwise, simply serve the public domain
    default_backend unprotected-app-backend

# Public page
backend unprotected-app-backend
    mode http
    balance roundrobin
    server node-unprotected-app unprotected-backend:80 check

# Page supposed to be protected
backend protected-app-backend
    mode http
    balance roundrobin

    server node-protected-app protected-backend:80 check

# Serve dex application
backend dex-backend
    mode http
    balance roundrobin

    server node-dex-app dex:5556 check

# Page the user is redirected to when unauthorized
backend unauthorized-backend
    mode http
    balance roundrobin
    http-response set-status 401
    http-response add-header WWW-Authenticate 'Basic realm="Access the webapp"'

    server node-noauth unauthorized-backend:80 check

# Page the user is redirected to when unauthorized
backend redirect-backend
    mode http
    balance roundrobin
    http-request redirect location %[var(sess.auth.redirect_url)]

# Backend bridging with the SPOE agent for LDAP auth
backend spoe-ldap
    mode tcp
    balance roundrobin

    timeout connect 5s
    timeout server  3m

    server node-auth spoe-ldap:8081

# Backend bridging with the SPOE agent for OIDC auth
backend spoe-oidc
    mode tcp
    balance roundrobin

    timeout connect 5s
    timeout server  3m

    server node-auth spoe-oidc:8081

backend oidc-auth-backend
    mode http
    balance roundrobin

    timeout connect 5s
    timeout server  3m

    server node-auth spoe-oidc:5000
